/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EHRmain {
  export type HealthRecordStruct = {
    owner: AddressLike;
    ipfsCid: string;
    dataType: BigNumberish;
    encryptedSymmetricKey: string;
    timestamp: BigNumberish;
    isValid: boolean;
    provider: AddressLike;
  };

  export type HealthRecordStructOutput = [
    owner: string,
    ipfsCid: string,
    dataType: bigint,
    encryptedSymmetricKey: string,
    timestamp: bigint,
    isValid: boolean,
    provider: string
  ] & {
    owner: string;
    ipfsCid: string;
    dataType: bigint;
    encryptedSymmetricKey: string;
    timestamp: bigint;
    isValid: boolean;
    provider: string;
  };

  export type PermissionRequestStruct = {
    requester: AddressLike;
    owner: AddressLike;
    requestId: BytesLike;
    ipfsCid: string;
    permissionType: BigNumberish;
    status: BigNumberish;
    requestDate: BigNumberish;
    expiryDate: BigNumberish;
    incentiveAmount: BigNumberish;
    isIncentiveBased: boolean;
  };

  export type PermissionRequestStructOutput = [
    requester: string,
    owner: string,
    requestId: string,
    ipfsCid: string,
    permissionType: bigint,
    status: bigint,
    requestDate: bigint,
    expiryDate: bigint,
    incentiveAmount: bigint,
    isIncentiveBased: boolean
  ] & {
    requester: string;
    owner: string;
    requestId: string;
    ipfsCid: string;
    permissionType: bigint;
    status: bigint;
    requestDate: bigint;
    expiryDate: bigint;
    incentiveAmount: bigint;
    isIncentiveBased: boolean;
  };

  export type ApprovedRecordStruct = {
    owner: AddressLike;
    careProvider: AddressLike;
    ipfsCid: string;
    dataType: BigNumberish;
    encryptedSymmetricKey: string;
    approvedDate: BigNumberish;
    expiryDate: BigNumberish;
    status: boolean;
  };

  export type ApprovedRecordStructOutput = [
    owner: string,
    careProvider: string,
    ipfsCid: string,
    dataType: bigint,
    encryptedSymmetricKey: string,
    approvedDate: bigint,
    expiryDate: bigint,
    status: boolean
  ] & {
    owner: string;
    careProvider: string;
    ipfsCid: string;
    dataType: bigint;
    encryptedSymmetricKey: string;
    approvedDate: bigint;
    expiryDate: bigint;
    status: boolean;
  };
}

export interface EHRmainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessCounts"
      | "addApprovedRecord"
      | "addEHRData"
      | "addPHRData"
      | "approvePermission"
      | "approvedRecords"
      | "approvedRecordsByID"
      | "checkUser"
      | "emergencyAccess"
      | "getHealthRecordByIpfs"
      | "getHealthRecordsByOwner"
      | "getKeyPair"
      | "getPendingRequestsForPatient"
      | "getPermissionRequest"
      | "getRecordsByCareProvider"
      | "getRecordsForResearcher"
      | "healthRecords"
      | "invalidateRecord"
      | "ownerToHealthRecords"
      | "permissionRequestIds"
      | "permissionRequests"
      | "permissions"
      | "registerUser"
      | "requestIncentiveBasedPermission"
      | "requestNonIncentiveBasedPermission"
      | "revokePermission"
      | "systemOwner"
      | "totalRecords"
      | "totalRequests"
      | "totalUsers"
      | "userKeys"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovedRecordAdded"
      | "DebugEvent"
      | "EmergencyAccess"
      | "HealthRecordAdded"
      | "PermissionGranted"
      | "PermissionRequested"
      | "PermissionRevoked"
      | "RecordAccessed"
      | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accessCounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addApprovedRecord",
    values: [
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addEHRData",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPHRData",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePermission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRecordsByID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthRecordByIpfs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthRecordsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequestsForPatient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordsByCareProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordsForResearcher",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "healthRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToHealthRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionRequestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [AddressLike, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIncentiveBasedPermission",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNonIncentiveBasedPermission",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "systemOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "accessCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addApprovedRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEHRData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPHRData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRecordsByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthRecordByIpfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthRecordsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKeyPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequestsForPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordsByCareProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordsForResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToHealthRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIncentiveBasedPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNonIncentiveBasedPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace ApprovedRecordAddedEvent {
  export type InputTuple = [
    owner: AddressLike,
    careProvider: AddressLike,
    ipfsCid: string,
    dataType: BigNumberish,
    encryptedSymmetricKey: string,
    approvedDate: BigNumberish,
    expiryDate: BigNumberish,
    status: boolean
  ];
  export type OutputTuple = [
    owner: string,
    careProvider: string,
    ipfsCid: string,
    dataType: bigint,
    encryptedSymmetricKey: string,
    approvedDate: bigint,
    expiryDate: bigint,
    status: boolean
  ];
  export interface OutputObject {
    owner: string;
    careProvider: string;
    ipfsCid: string;
    dataType: bigint;
    encryptedSymmetricKey: string;
    approvedDate: bigint;
    expiryDate: bigint;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugEventEvent {
  export type InputTuple = [ipfsCid: string, length: BigNumberish];
  export type OutputTuple = [ipfsCid: string, length: bigint];
  export interface OutputObject {
    ipfsCid: string;
    length: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAccessEvent {
  export type InputTuple = [
    provider: AddressLike,
    patient: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    patient: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    provider: string;
    patient: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealthRecordAddedEvent {
  export type InputTuple = [
    ipfsCid: string,
    owner: AddressLike,
    dataType: BigNumberish
  ];
  export type OutputTuple = [ipfsCid: string, owner: string, dataType: bigint];
  export interface OutputObject {
    ipfsCid: string;
    owner: string;
    dataType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionGrantedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requester: AddressLike,
    owner: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    requester: string,
    owner: string
  ];
  export interface OutputObject {
    requestId: string;
    requester: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requester: AddressLike,
    owner: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    requester: string,
    owner: string
  ];
  export interface OutputObject {
    requestId: string;
    requester: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionRevokedEvent {
  export type InputTuple = [ipfsCid: string, revokedUser: AddressLike];
  export type OutputTuple = [ipfsCid: string, revokedUser: string];
  export interface OutputObject {
    ipfsCid: string;
    revokedUser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordAccessedEvent {
  export type InputTuple = [
    recordId: string,
    accessor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recordId: string,
    accessor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    recordId: string;
    accessor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [userAddress: AddressLike, role: BigNumberish];
  export type OutputTuple = [userAddress: string, role: bigint];
  export interface OutputObject {
    userAddress: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EHRmain extends BaseContract {
  connect(runner?: ContractRunner | null): EHRmain;
  waitForDeployment(): Promise<this>;

  interface: EHRmainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessCounts: TypedContractMethod<[arg0: string], [bigint], "view">;

  addApprovedRecord: TypedContractMethod<
    [
      _owner: AddressLike,
      _careProvider: AddressLike,
      _ipfsCid: string,
      _dataType: BigNumberish,
      _encryptedSymmetricKey: string,
      _approvedDate: BigNumberish,
      _expiryDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addEHRData: TypedContractMethod<
    [
      _patientAddress: AddressLike,
      _ipfsCid: string,
      _dataType: BigNumberish,
      _encryptedSymmetricKey: string
    ],
    [boolean],
    "nonpayable"
  >;

  addPHRData: TypedContractMethod<
    [_ipfsCid: string, _dataType: BigNumberish, _encryptedSymmetricKey: string],
    [boolean],
    "nonpayable"
  >;

  approvePermission: TypedContractMethod<
    [_requestId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  approvedRecords: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, string, bigint, bigint, boolean] & {
        owner: string;
        careProvider: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        approvedDate: bigint;
        expiryDate: bigint;
        status: boolean;
      }
    ],
    "view"
  >;

  approvedRecordsByID: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, string, bigint, bigint, boolean] & {
        owner: string;
        careProvider: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        approvedDate: bigint;
        expiryDate: bigint;
        status: boolean;
      }
    ],
    "view"
  >;

  checkUser: TypedContractMethod<[_userAddress: AddressLike], [bigint], "view">;

  emergencyAccess: TypedContractMethod<
    [_patientAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getHealthRecordByIpfs: TypedContractMethod<
    [recordId: string],
    [
      [string, string, bigint, string, bigint, boolean, string] & {
        owner: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        timestamp: bigint;
        isValid: boolean;
        provider: string;
      }
    ],
    "nonpayable"
  >;

  getHealthRecordsByOwner: TypedContractMethod<
    [userAddress: AddressLike],
    [EHRmain.HealthRecordStructOutput[]],
    "view"
  >;

  getKeyPair: TypedContractMethod<[userAddress: AddressLike], [string], "view">;

  getPendingRequestsForPatient: TypedContractMethod<
    [patient: AddressLike],
    [EHRmain.PermissionRequestStructOutput[]],
    "view"
  >;

  getPermissionRequest: TypedContractMethod<
    [requestId: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        requester: string;
        owner: string;
        ipfsCid: string;
        requestDate: bigint;
        expiryDate: bigint;
        incentiveAmount: bigint;
        isIncentiveBased: boolean;
        status: bigint;
      }
    ],
    "view"
  >;

  getRecordsByCareProvider: TypedContractMethod<
    [_careProvider: AddressLike],
    [EHRmain.ApprovedRecordStructOutput[]],
    "view"
  >;

  getRecordsForResearcher: TypedContractMethod<
    [requester: AddressLike, recordId: string],
    [EHRmain.ApprovedRecordStructOutput],
    "view"
  >;

  healthRecords: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, bigint, boolean, string] & {
        owner: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        timestamp: bigint;
        isValid: boolean;
        provider: string;
      }
    ],
    "view"
  >;

  invalidateRecord: TypedContractMethod<
    [_ipfsCid: string],
    [void],
    "nonpayable"
  >;

  ownerToHealthRecords: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  permissionRequestIds: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  permissionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        requester: string;
        owner: string;
        requestId: string;
        ipfsCid: string;
        permissionType: bigint;
        status: bigint;
        requestDate: bigint;
        expiryDate: bigint;
        incentiveAmount: bigint;
        isIncentiveBased: boolean;
      }
    ],
    "view"
  >;

  permissions: TypedContractMethod<
    [arg0: AddressLike, arg1: string, arg2: AddressLike],
    [boolean],
    "view"
  >;

  registerUser: TypedContractMethod<
    [
      _role: BigNumberish,
      _publicKeyHash: BytesLike,
      _publicKeyForEncryption: string
    ],
    [boolean],
    "nonpayable"
  >;

  requestIncentiveBasedPermission: TypedContractMethod<
    [_owner: AddressLike, _ipfsCid: string, _permissionType: BigNumberish],
    [string],
    "payable"
  >;

  requestNonIncentiveBasedPermission: TypedContractMethod<
    [_owner: AddressLike, _ipfsCid: string, _permissionType: BigNumberish],
    [string],
    "nonpayable"
  >;

  revokePermission: TypedContractMethod<
    [_ipfsCid: string, _user: AddressLike],
    [boolean],
    "nonpayable"
  >;

  systemOwner: TypedContractMethod<[], [string], "view">;

  totalRecords: TypedContractMethod<[], [bigint], "view">;

  totalRequests: TypedContractMethod<[], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  userKeys: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, string] & {
        userAddress: string;
        role: bigint;
        registrationDate: bigint;
        publicKeyHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessCounts"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "addApprovedRecord"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _careProvider: AddressLike,
      _ipfsCid: string,
      _dataType: BigNumberish,
      _encryptedSymmetricKey: string,
      _approvedDate: BigNumberish,
      _expiryDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEHRData"
  ): TypedContractMethod<
    [
      _patientAddress: AddressLike,
      _ipfsCid: string,
      _dataType: BigNumberish,
      _encryptedSymmetricKey: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPHRData"
  ): TypedContractMethod<
    [_ipfsCid: string, _dataType: BigNumberish, _encryptedSymmetricKey: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approvePermission"
  ): TypedContractMethod<[_requestId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedRecords"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, string, bigint, bigint, boolean] & {
        owner: string;
        careProvider: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        approvedDate: bigint;
        expiryDate: bigint;
        status: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approvedRecordsByID"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, string, bigint, bigint, boolean] & {
        owner: string;
        careProvider: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        approvedDate: bigint;
        expiryDate: bigint;
        status: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkUser"
  ): TypedContractMethod<[_userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyAccess"
  ): TypedContractMethod<
    [_patientAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getHealthRecordByIpfs"
  ): TypedContractMethod<
    [recordId: string],
    [
      [string, string, bigint, string, bigint, boolean, string] & {
        owner: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        timestamp: bigint;
        isValid: boolean;
        provider: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getHealthRecordsByOwner"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [EHRmain.HealthRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKeyPair"
  ): TypedContractMethod<[userAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingRequestsForPatient"
  ): TypedContractMethod<
    [patient: AddressLike],
    [EHRmain.PermissionRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionRequest"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        requester: string;
        owner: string;
        ipfsCid: string;
        requestDate: bigint;
        expiryDate: bigint;
        incentiveAmount: bigint;
        isIncentiveBased: boolean;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecordsByCareProvider"
  ): TypedContractMethod<
    [_careProvider: AddressLike],
    [EHRmain.ApprovedRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecordsForResearcher"
  ): TypedContractMethod<
    [requester: AddressLike, recordId: string],
    [EHRmain.ApprovedRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "healthRecords"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, bigint, boolean, string] & {
        owner: string;
        ipfsCid: string;
        dataType: bigint;
        encryptedSymmetricKey: string;
        timestamp: bigint;
        isValid: boolean;
        provider: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "invalidateRecord"
  ): TypedContractMethod<[_ipfsCid: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerToHealthRecords"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "permissionRequestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permissionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        requester: string;
        owner: string;
        requestId: string;
        ipfsCid: string;
        permissionType: bigint;
        status: bigint;
        requestDate: bigint;
        expiryDate: bigint;
        incentiveAmount: bigint;
        isIncentiveBased: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "permissions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [
      _role: BigNumberish,
      _publicKeyHash: BytesLike,
      _publicKeyForEncryption: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIncentiveBasedPermission"
  ): TypedContractMethod<
    [_owner: AddressLike, _ipfsCid: string, _permissionType: BigNumberish],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestNonIncentiveBasedPermission"
  ): TypedContractMethod<
    [_owner: AddressLike, _ipfsCid: string, _permissionType: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokePermission"
  ): TypedContractMethod<
    [_ipfsCid: string, _user: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "systemOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRecords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userKeys"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, string] & {
        userAddress: string;
        role: bigint;
        registrationDate: bigint;
        publicKeyHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ApprovedRecordAdded"
  ): TypedContractEvent<
    ApprovedRecordAddedEvent.InputTuple,
    ApprovedRecordAddedEvent.OutputTuple,
    ApprovedRecordAddedEvent.OutputObject
  >;
  getEvent(
    key: "DebugEvent"
  ): TypedContractEvent<
    DebugEventEvent.InputTuple,
    DebugEventEvent.OutputTuple,
    DebugEventEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAccess"
  ): TypedContractEvent<
    EmergencyAccessEvent.InputTuple,
    EmergencyAccessEvent.OutputTuple,
    EmergencyAccessEvent.OutputObject
  >;
  getEvent(
    key: "HealthRecordAdded"
  ): TypedContractEvent<
    HealthRecordAddedEvent.InputTuple,
    HealthRecordAddedEvent.OutputTuple,
    HealthRecordAddedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionGranted"
  ): TypedContractEvent<
    PermissionGrantedEvent.InputTuple,
    PermissionGrantedEvent.OutputTuple,
    PermissionGrantedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionRequested"
  ): TypedContractEvent<
    PermissionRequestedEvent.InputTuple,
    PermissionRequestedEvent.OutputTuple,
    PermissionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionRevoked"
  ): TypedContractEvent<
    PermissionRevokedEvent.InputTuple,
    PermissionRevokedEvent.OutputTuple,
    PermissionRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RecordAccessed"
  ): TypedContractEvent<
    RecordAccessedEvent.InputTuple,
    RecordAccessedEvent.OutputTuple,
    RecordAccessedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "ApprovedRecordAdded(address,address,string,uint8,string,uint256,uint256,bool)": TypedContractEvent<
      ApprovedRecordAddedEvent.InputTuple,
      ApprovedRecordAddedEvent.OutputTuple,
      ApprovedRecordAddedEvent.OutputObject
    >;
    ApprovedRecordAdded: TypedContractEvent<
      ApprovedRecordAddedEvent.InputTuple,
      ApprovedRecordAddedEvent.OutputTuple,
      ApprovedRecordAddedEvent.OutputObject
    >;

    "DebugEvent(string,uint256)": TypedContractEvent<
      DebugEventEvent.InputTuple,
      DebugEventEvent.OutputTuple,
      DebugEventEvent.OutputObject
    >;
    DebugEvent: TypedContractEvent<
      DebugEventEvent.InputTuple,
      DebugEventEvent.OutputTuple,
      DebugEventEvent.OutputObject
    >;

    "EmergencyAccess(address,address,uint256)": TypedContractEvent<
      EmergencyAccessEvent.InputTuple,
      EmergencyAccessEvent.OutputTuple,
      EmergencyAccessEvent.OutputObject
    >;
    EmergencyAccess: TypedContractEvent<
      EmergencyAccessEvent.InputTuple,
      EmergencyAccessEvent.OutputTuple,
      EmergencyAccessEvent.OutputObject
    >;

    "HealthRecordAdded(string,address,uint8)": TypedContractEvent<
      HealthRecordAddedEvent.InputTuple,
      HealthRecordAddedEvent.OutputTuple,
      HealthRecordAddedEvent.OutputObject
    >;
    HealthRecordAdded: TypedContractEvent<
      HealthRecordAddedEvent.InputTuple,
      HealthRecordAddedEvent.OutputTuple,
      HealthRecordAddedEvent.OutputObject
    >;

    "PermissionGranted(bytes32,address,address)": TypedContractEvent<
      PermissionGrantedEvent.InputTuple,
      PermissionGrantedEvent.OutputTuple,
      PermissionGrantedEvent.OutputObject
    >;
    PermissionGranted: TypedContractEvent<
      PermissionGrantedEvent.InputTuple,
      PermissionGrantedEvent.OutputTuple,
      PermissionGrantedEvent.OutputObject
    >;

    "PermissionRequested(bytes32,address,address)": TypedContractEvent<
      PermissionRequestedEvent.InputTuple,
      PermissionRequestedEvent.OutputTuple,
      PermissionRequestedEvent.OutputObject
    >;
    PermissionRequested: TypedContractEvent<
      PermissionRequestedEvent.InputTuple,
      PermissionRequestedEvent.OutputTuple,
      PermissionRequestedEvent.OutputObject
    >;

    "PermissionRevoked(string,address)": TypedContractEvent<
      PermissionRevokedEvent.InputTuple,
      PermissionRevokedEvent.OutputTuple,
      PermissionRevokedEvent.OutputObject
    >;
    PermissionRevoked: TypedContractEvent<
      PermissionRevokedEvent.InputTuple,
      PermissionRevokedEvent.OutputTuple,
      PermissionRevokedEvent.OutputObject
    >;

    "RecordAccessed(string,address,uint256)": TypedContractEvent<
      RecordAccessedEvent.InputTuple,
      RecordAccessedEvent.OutputTuple,
      RecordAccessedEvent.OutputObject
    >;
    RecordAccessed: TypedContractEvent<
      RecordAccessedEvent.InputTuple,
      RecordAccessedEvent.OutputTuple,
      RecordAccessedEvent.OutputObject
    >;

    "UserRegistered(address,uint8)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
